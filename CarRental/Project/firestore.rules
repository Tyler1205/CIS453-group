/**
 * @description This ruleset enforces a user-ownership model for user profiles and allows any authenticated user to create bookings. Vehicle data is publicly readable.
 * @dataStructure
 *   - /users/{userId}: Stores user profile information. Only the user can read/write their own profile.
 *   - /vehicles/{vehicleId}: Stores vehicle information. Publicly readable.
 *   - /bookings/{bookingId}: Stores booking information. Any authenticated user can create a booking.
 * @keySecurityDecisions
 *   - Users can only access their own profile data.
 *   - Vehicle information is public.
 *   - Any signed-in user can create a booking.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (get, update, delete) User 'alice' (auth.uid: 'alice') can read/write her own profile (userId: 'alice').
     * @allow (create) User 'alice' (auth.uid: 'alice') can create her profile (userId: 'alice').
     * @deny (get, update, delete) User 'bob' (auth.uid: 'bob') cannot read/write Alice's profile (userId: 'alice').
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to vehicle documents. Vehicles are publicly readable.
     * @path /vehicles/{vehicleId}
     * @allow (get, list) Any user can read vehicle data.
     * @deny (create, update, delete) No one can create, update, or delete vehicle data.
     * @principle Allows public read access but restricts all write access to vehicle data.
     */
    match /vehicles/{vehicleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to booking documents. Any signed-in user can create a booking.
     * @path /bookings/{bookingId}
     * @allow (create) Any signed-in user can create a booking.
     * @deny (update, delete) No one can update or delete a booking.
     * @principle Allows any authenticated user to create a booking.
     */
    match /bookings/{bookingId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }
}